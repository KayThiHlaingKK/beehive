// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// serial name 'ComponentType'
public enum Com_Algolia_Instantsearch_Telemetry_ComponentType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case hitsSearcher // = 1
  case facetSearcher // = 2
  case multiSearcher // = 3
  case answersSearcher // = 4
  case filterState // = 5
  case dynamicFacets // = 6
  case hierarchicalFacets // = 7
  case facetList // = 8
  case filterClear // = 9
  case facetFilterList // = 10
  case numericFilterList // = 11
  case tagFilterList // = 12
  case filterToggle // = 13
  case numberFilter // = 14
  case numberRangeFilter // = 15
  case currentFilters // = 16
  case hits // = 17
  case loading // = 18
  case stats // = 19
  case searchBox // = 20
  case queryRuleCustomData // = 21
  case relevantSort // = 22
  case sortBy // = 23
  case relatedItems // = 24
  case filterMap // = 25
  case multiHits // = 26
  case filterList // = 27

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .hitsSearcher
    case 2: self = .facetSearcher
    case 3: self = .multiSearcher
    case 4: self = .answersSearcher
    case 5: self = .filterState
    case 6: self = .dynamicFacets
    case 7: self = .hierarchicalFacets
    case 8: self = .facetList
    case 9: self = .filterClear
    case 10: self = .facetFilterList
    case 11: self = .numericFilterList
    case 12: self = .tagFilterList
    case 13: self = .filterToggle
    case 14: self = .numberFilter
    case 15: self = .numberRangeFilter
    case 16: self = .currentFilters
    case 17: self = .hits
    case 18: self = .loading
    case 19: self = .stats
    case 20: self = .searchBox
    case 21: self = .queryRuleCustomData
    case 22: self = .relevantSort
    case 23: self = .sortBy
    case 24: self = .relatedItems
    case 25: self = .filterMap
    case 26: self = .multiHits
    case 27: self = .filterList
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .hitsSearcher: return 1
    case .facetSearcher: return 2
    case .multiSearcher: return 3
    case .answersSearcher: return 4
    case .filterState: return 5
    case .dynamicFacets: return 6
    case .hierarchicalFacets: return 7
    case .facetList: return 8
    case .filterClear: return 9
    case .facetFilterList: return 10
    case .numericFilterList: return 11
    case .tagFilterList: return 12
    case .filterToggle: return 13
    case .numberFilter: return 14
    case .numberRangeFilter: return 15
    case .currentFilters: return 16
    case .hits: return 17
    case .loading: return 18
    case .stats: return 19
    case .searchBox: return 20
    case .queryRuleCustomData: return 21
    case .relevantSort: return 22
    case .sortBy: return 23
    case .relatedItems: return 24
    case .filterMap: return 25
    case .multiHits: return 26
    case .filterList: return 27
    }
  }

}

#if swift(>=4.2)

extension Com_Algolia_Instantsearch_Telemetry_ComponentType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// serial name 'ComponentParam'
public enum Com_Algolia_Instantsearch_Telemetry_ComponentParam: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case undefined // = 0
  case apiKey // = 1
  case appID // = 2
  case attribute // = 3
  case bounds // = 4
  case clearMode // = 5
  case client // = 6
  case facets // = 7
  case filter // = 8
  case filterGroupForAttribute // = 9
  case filterGroupIds // = 10
  case groupName // = 11
  case hierarchicalAttributes // = 12
  case indexName // = 13
  case infiniteScrolling // = 14
  case item // = 15
  case items // = 16
  case `operator` // = 17
  case orderedFacets // = 18
  case priority // = 19
  case range // = 20
  case searchTriggeringMode // = 21
  case searcher // = 22
  case isSelected // = 23
  case selectionMode // = 24
  case selectionModeForAttribute // = 25
  case selections // = 26
  case separator // = 27
  case showItemsOnEmptyQuery // = 28
  case isDisjunctiveFacetingEnabled // = 29
  case isLoading // = 30
  case mode // = 31
  case number // = 32
  case persistentSelection // = 33
  case searchMode // = 34
  case strategy // = 35
  case groupIds // = 36
  case requestOptions // = 37
  case facetsQuery // = 38
  case filters // = 39
  case numericOperator // = 40
  case selected // = 41
  case filterStateParameter // = 42
  case hitsSearcherParameter // = 43
  case facetSearcherParameter // = 44

  public init() {
    self = .undefined
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .apiKey
    case 2: self = .appID
    case 3: self = .attribute
    case 4: self = .bounds
    case 5: self = .clearMode
    case 6: self = .client
    case 7: self = .facets
    case 8: self = .filter
    case 9: self = .filterGroupForAttribute
    case 10: self = .filterGroupIds
    case 11: self = .groupName
    case 12: self = .hierarchicalAttributes
    case 13: self = .indexName
    case 14: self = .infiniteScrolling
    case 15: self = .item
    case 16: self = .items
    case 17: self = .operator
    case 18: self = .orderedFacets
    case 19: self = .priority
    case 20: self = .range
    case 21: self = .searchTriggeringMode
    case 22: self = .searcher
    case 23: self = .isSelected
    case 24: self = .selectionMode
    case 25: self = .selectionModeForAttribute
    case 26: self = .selections
    case 27: self = .separator
    case 28: self = .showItemsOnEmptyQuery
    case 29: self = .isDisjunctiveFacetingEnabled
    case 30: self = .isLoading
    case 31: self = .mode
    case 32: self = .number
    case 33: self = .persistentSelection
    case 34: self = .searchMode
    case 35: self = .strategy
    case 36: self = .groupIds
    case 37: self = .requestOptions
    case 38: self = .facetsQuery
    case 39: self = .filters
    case 40: self = .numericOperator
    case 41: self = .selected
    case 42: self = .filterStateParameter
    case 43: self = .hitsSearcherParameter
    case 44: self = .facetSearcherParameter
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .apiKey: return 1
    case .appID: return 2
    case .attribute: return 3
    case .bounds: return 4
    case .clearMode: return 5
    case .client: return 6
    case .facets: return 7
    case .filter: return 8
    case .filterGroupForAttribute: return 9
    case .filterGroupIds: return 10
    case .groupName: return 11
    case .hierarchicalAttributes: return 12
    case .indexName: return 13
    case .infiniteScrolling: return 14
    case .item: return 15
    case .items: return 16
    case .operator: return 17
    case .orderedFacets: return 18
    case .priority: return 19
    case .range: return 20
    case .searchTriggeringMode: return 21
    case .searcher: return 22
    case .isSelected: return 23
    case .selectionMode: return 24
    case .selectionModeForAttribute: return 25
    case .selections: return 26
    case .separator: return 27
    case .showItemsOnEmptyQuery: return 28
    case .isDisjunctiveFacetingEnabled: return 29
    case .isLoading: return 30
    case .mode: return 31
    case .number: return 32
    case .persistentSelection: return 33
    case .searchMode: return 34
    case .strategy: return 35
    case .groupIds: return 36
    case .requestOptions: return 37
    case .facetsQuery: return 38
    case .filters: return 39
    case .numericOperator: return 40
    case .selected: return 41
    case .filterStateParameter: return 42
    case .hitsSearcherParameter: return 43
    case .facetSearcherParameter: return 44
    }
  }

}

#if swift(>=4.2)

extension Com_Algolia_Instantsearch_Telemetry_ComponentParam: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// serial name 'com.algolia.instantsearch.telemetry.Schema'
public struct Com_Algolia_Instantsearch_Telemetry_Schema {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// WARNING: a default value decoded when value is missing
  public var components: [Com_Algolia_Instantsearch_Telemetry_Component] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// serial name 'com.algolia.instantsearch.telemetry.Component'
public struct Com_Algolia_Instantsearch_Telemetry_Component {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Com_Algolia_Instantsearch_Telemetry_ComponentType {
    get {return _type ?? .unknown}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  /// WARNING: a default value decoded when value is missing
  public var parameters: [Com_Algolia_Instantsearch_Telemetry_ComponentParam] = []

  public var isConnector: Bool {
    get {return _isConnector ?? false}
    set {_isConnector = newValue}
  }
  /// Returns true if `isConnector` has been explicitly set.
  public var hasIsConnector: Bool {return self._isConnector != nil}
  /// Clears the value of `isConnector`. Subsequent reads from it will return its default value.
  public mutating func clearIsConnector() {self._isConnector = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: Com_Algolia_Instantsearch_Telemetry_ComponentType? = nil
  fileprivate var _isConnector: Bool? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.algolia.instantsearch.telemetry"

extension Com_Algolia_Instantsearch_Telemetry_ComponentType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "HitsSearcher"),
    2: .same(proto: "FacetSearcher"),
    3: .same(proto: "MultiSearcher"),
    4: .same(proto: "AnswersSearcher"),
    5: .same(proto: "FilterState"),
    6: .same(proto: "DynamicFacets"),
    7: .same(proto: "HierarchicalFacets"),
    8: .same(proto: "FacetList"),
    9: .same(proto: "FilterClear"),
    10: .same(proto: "FacetFilterList"),
    11: .same(proto: "NumericFilterList"),
    12: .same(proto: "TagFilterList"),
    13: .same(proto: "FilterToggle"),
    14: .same(proto: "NumberFilter"),
    15: .same(proto: "NumberRangeFilter"),
    16: .same(proto: "CurrentFilters"),
    17: .same(proto: "Hits"),
    18: .same(proto: "Loading"),
    19: .same(proto: "Stats"),
    20: .same(proto: "SearchBox"),
    21: .same(proto: "QueryRuleCustomData"),
    22: .same(proto: "RelevantSort"),
    23: .same(proto: "SortBy"),
    24: .same(proto: "RelatedItems"),
    25: .same(proto: "FilterMap"),
    26: .same(proto: "MultiHits"),
    27: .same(proto: "FilterList"),
  ]
}

extension Com_Algolia_Instantsearch_Telemetry_ComponentParam: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Undefined"),
    1: .same(proto: "ApiKey"),
    2: .same(proto: "AppID"),
    3: .same(proto: "Attribute"),
    4: .same(proto: "Bounds"),
    5: .same(proto: "ClearMode"),
    6: .same(proto: "Client"),
    7: .same(proto: "Facets"),
    8: .same(proto: "Filter"),
    9: .same(proto: "FilterGroupForAttribute"),
    10: .same(proto: "FilterGroupIDs"),
    11: .same(proto: "GroupName"),
    12: .same(proto: "HierarchicalAttributes"),
    13: .same(proto: "IndexName"),
    14: .same(proto: "InfiniteScrolling"),
    15: .same(proto: "Item"),
    16: .same(proto: "Items"),
    17: .same(proto: "Operator"),
    18: .same(proto: "OrderedFacets"),
    19: .same(proto: "Priority"),
    20: .same(proto: "Range"),
    21: .same(proto: "SearchTriggeringMode"),
    22: .same(proto: "Searcher"),
    23: .same(proto: "IsSelected"),
    24: .same(proto: "SelectionMode"),
    25: .same(proto: "SelectionModeForAttribute"),
    26: .same(proto: "Selections"),
    27: .same(proto: "Separator"),
    28: .same(proto: "ShowItemsOnEmptyQuery"),
    29: .same(proto: "IsDisjunctiveFacetingEnabled"),
    30: .same(proto: "IsLoading"),
    31: .same(proto: "Mode"),
    32: .same(proto: "Number"),
    33: .same(proto: "PersistentSelection"),
    34: .same(proto: "SearchMode"),
    35: .same(proto: "Strategy"),
    36: .same(proto: "GroupIDs"),
    37: .same(proto: "RequestOptions"),
    38: .same(proto: "FacetsQuery"),
    39: .same(proto: "Filters"),
    40: .same(proto: "NumericOperator"),
    41: .same(proto: "Selected"),
    42: .same(proto: "FilterStateParameter"),
    43: .same(proto: "HitsSearcherParameter"),
    44: .same(proto: "FacetSearcherParameter"),
  ]
}

extension Com_Algolia_Instantsearch_Telemetry_Schema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Schema"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    700: .same(proto: "components"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.components) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 700: try { try decoder.decodeRepeatedMessageField(value: &self.components) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.components.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.components, fieldNumber: 700)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Algolia_Instantsearch_Telemetry_Schema, rhs: Com_Algolia_Instantsearch_Telemetry_Schema) -> Bool {
    if lhs.components != rhs.components {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Algolia_Instantsearch_Telemetry_Component: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Component"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    600: .same(proto: "type"),
    601: .same(proto: "parameters"),
    602: .same(proto: "isConnector"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._isConnector == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 600: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 601: try { try decoder.decodeRepeatedEnumField(value: &self.parameters) }()
      case 602: try { try decoder.decodeSingularBoolField(value: &self._isConnector) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 600)
    } }()
    if !self.parameters.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.parameters, fieldNumber: 601)
    }
    try { if let v = self._isConnector {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 602)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Algolia_Instantsearch_Telemetry_Component, rhs: Com_Algolia_Instantsearch_Telemetry_Component) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs._isConnector != rhs._isConnector {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
